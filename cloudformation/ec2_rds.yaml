---
AWSTemplateFormatVersion: '2010-09-09'
Description: Using Elasticache to Improve Database Performance
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
    Private2:
      CIDR: 10.0.2.0/24
    Private1:
      CIDR: 10.0.1.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
      - Key: Name
        Value: DB_VPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private1
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Private1
      - Key: Name
        Value: Private1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private2
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Private2
      - Key: Name
        Value: Private2
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
      - Key: Name
        Value: Public
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundSSHPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundEmphemeralPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '104'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Ref: PublicNetworkAcl
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: database-group
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: DatabaseSG
      SecurityGroupIngress:
      - CidrIp: 10.0.0.0/16
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB subnet group
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      BackupRetentionPeriod: '7'
      DBInstanceClass: db.t2.medium
      Engine: mysql
      DBName: wordpress
      MasterUsername: wordpress
      MasterUserPassword: wordpress
      VPCSecurityGroups:
      - Fn::GetAtt:
        - DatabaseSecurityGroup
        - GroupId
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      MultiAZ: false
      StorageType: gp2
  PublicInstance:
    Type: AWS::EC2::Instance
    DependsOn: GatewayToInternet
    Properties:
      InstanceType: t2.micro
      Tags:
      - Key: Name
        Value: Bastion
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "/bin/echo '9TozF]V+' | /usr/bin/passwd cloud_user --stdin\n"
            - "yum -y install postgresql96 nginx python27-psycopg2 \n"
            - 'pip-2.7 install flask configparser redis

              '
            - |
              echo 'location /app {
              ' >> /etc/nginx/default.d/app.conf
            - |
              echo 'proxy_pass         http://127.0.0.1:5000/;
              ' >> /etc/nginx/default.d/app.conf
            - |
              echo 'proxy_redirect     off;
              ' >> /etc/nginx/default.d/app.conf
            - |
              echo 'proxy_set_header   Host                 $host;
              ' >> /etc/nginx/default.d/app.conf
            - |
              echo 'proxy_set_header   X-Real-IP            $remote_addr;
              ' >> /etc/nginx/default.d/app.conf
            - |
              echo 'proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
              ' >> /etc/nginx/default.d/app.conf
            - |
              echo 'proxy_set_header   X-Forwarded-Proto    $scheme;
              ' >> /etc/nginx/default.d/app.conf
            - |
              echo '}
              ' >> /etc/nginx/default.d/app.conf
            - 'service nginx start

              '
      ImageId: "ami-04aacfc2f8b7e662b"
      NetworkInterfaces:
      - GroupSet:
        - Ref: EC2SecurityGroup
        PrivateIpAddress: 10.0.0.120
        AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: PublicSubnet
  DMSCloudwatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: dms-cloudwatch-logs-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - dms.amazonaws.com
          Action:
          - sts:AssumeRole
Outputs:
  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value:
      Fn::GetAtt:
      - Database
      - Endpoint.Address
