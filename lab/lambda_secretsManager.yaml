Using Secrets Manager to Authenticate with an RDS Database Using Lambda
Introduction
AWS Secrets Manager helps you protect secrets needed to access your applications, services, and IT resources. The service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. In this lab, we connect to a MySQL RDS database from an AWS Lambda function using a username and password, and then we hand over credential management to the AWS Secrets Manager service. We then use the Secrets Manager API to connect to the database instead of hard-coding credentials in our Lambda function. By the end of this lab, you will understand how to store a secret in AWS Secrets Manager and access it from a Lambda function.

Solution
Log in to AWS Management Console using the credentials provided. Use an incognito or private browser window to ensure you're using the lab account rather than your own.

Make sure you're in the N. Virginia (us-east-1) Region throughout the lab.

Download the MySQL Library ZIP file you'll need for the first lab objective.

Create a Lambda Function
From the AWS Management Console, navigate to RDS in a new tab.
From the left navigation menu, click Databases.
Click the link for the displayed RDS database.
Under the Connectivity & security section, copy the value for Endpoint. Save the value to a text file to use for later.
In a new tab, navigate to Lambda.
Click Create a function.
Make sure the Author from scratch option at the top is selected, and then use the following settings:
Function name: Enter testRDS.
Runtime: Select Node.js 18.x.
Expand Advanced settings, click Enable VPC, and set the following values:
VPC: Select the lab-provided VPC.
Subnets: Select the two subnets that have Private in their name/ID.
Security groups: Select the lab-provided DatabaseSecurityGroup security group (NOT the default security group).
Click Create function.
Note: It may take up to 5 to 10 minutes to finish creating. The blue bar at the top of the page will indicate the function is being created.

Create the MySQL Layer, and Copy Your Code to the Lambda Function
Once the function has been created, select the Configuration tab.
Next to General configuration, click Edit.
Change the Timeout setting to 6 seconds, and click Save.
Select the hamburger menu on the left-hand side, then click Layers.
Click Create layer.
Set the following values:
Name: Enter mysql.
Upload a .zip file: Select this option, and upload the file:
Click Upload.
Upload the MySQL Library ZIP file you downloaded earlier.
Compatible runtimes: Select Node.js 18.x.
Click Create.
On the left, click the hamburger menu, and select Functions.
Select the testRDS function.
Once on the testRDS page, scroll down to Layers.
In the Layers section, click Add a layer.
Select Custom layers, and select the following values:
Custom layers: Select mysql.
Version: Select the displayed version.
Click Add. Wait a minute for the function to update.
Create Table in the RDS Database Using Lambda to Check Connectivity
In the Code source section, expand testRDS > index.mjs.

Delete the existing code in the index.mjs file, and replace it with the following code:

import mysql from 'mysql2/promise';

export const handler = async (event, context, callback) => {
  try {
    const connection = await mysql.createConnection({
      host: "<RDS Endpoint>",
      user: "username",
      password: "password",
      database: "example",
    });

    // Create 'pets' table
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS pets (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        age INT NOT NULL
      )
    `);

    console.log('Table created: pets');

    // List all tables
    const [rows] = await connection.execute('SHOW TABLES');
    console.log('Tables:');
    rows.forEach((row) => {
      console.log(row[`Tables_in_example`]);
    });

    connection.end();

    callback(null, {
      statusCode: 200,
      body: 'Tables listed successfully',
    });
  } catch (err) {
    console.error(err);
    callback(err, {
      statusCode: 500,
      body: 'Error listing tables',
    });
  }
};
Replace the <RDS Endpoint> placeholder with the endpoint value you previously copied from RDS. Ensure it remains wrapped in quotes.

Click Deploy.

Once the function is updated, click Test.

In the Configure test event dialog, for Event name, enter test.

Click Save.

Click Test again.

Note: The Response should return a statusCode of 200.

Modify the Lambda IAM Role
Click the Configuration tab.
From the left menu, select Permissions. Review the permitted actions in the Resource summary section.
Click the link under Resource summary to open IAM.
On the right side of the Permission policies box, click Add permissions > Attach policies.
Search for and select the checkbox next to the SecretsManagerReadWrite policy name.
Click Add permissions.
Wait a few moments for your configurations to take effect.
Go back to Lambda, and click the Refresh icon at the top of the page. Observe all the additional permissions the role has access to.
Create a Secret in Secrets Manager
In a new browser tab, navigate to Secrets Manager.
Click Store a new secret.
With Credentials for Amazon RDS database selected, set the following values:
User name: Enter username.
Password: Enter password.
Encryption key: Leave this as the default option.
Database: Select the listed DB instance.
Click Next.
On the next page, for Secret name, enter RDScredentials.
Leave the rest of the defaults as they are, and click Next.
On the next page, set the following values:
Toggle the Automatic rotation option to enable it.
Leave Schedule expression builder selected.
Time unit: Days; enter 1.
Leave Create a rotation function selected.
SecretsManager: Enter rotateRDS.
Use separate credentials to rotate this secret: Leave No selected.
Click Next.
Scroll down and click Store.
Note: It may take up to 5 to 10 minutes to finish the configuration.

Once it's done, refresh your page and click RDScredentials.
In the Secret value section, click Retrieve secret value. You should see the password listed as "password."
Go back to the Lambda console, and click the hamburger menu. Then, select Functions. Click the Refresh icon if the page still shows only one function. You should also see the SecretsManagerrotateRDS function.
To check if the function is running, from the left menu, click Applications. The function should show as Create complete.
Back in Secrets Manager, refresh the page and click Retrieve secret value to see the secret again. You should no longer see "password" as the secret password value. Instead, the new value should be a string of characters.
Test Connectivity from Lambda to RDS Using Credentials from AWS Secrets Manager
Go back to Lambda.

From the left menu, select Functions.

Select the testRDS function.

Select the index.mjs tab.

Remove all of the code from the index.mjs file.

Add the following new code:

import mysql from 'mysql2/promise';
import AWS from 'aws-sdk';

const secretName = 'RDScredentials';
const region = 'us-east-1';
const rdsEndpoint = '<RDS Endpoint>';
const databaseName = 'example';

AWS.config.update({ region: region });

const secretsManager = new AWS.SecretsManager();

export const handler = async (event, context) => {
  try {
    const data = await secretsManager.getSecretValue({ SecretId: secretName }).promise();
    const secret = JSON.parse(data.SecretString || Buffer.from(data.SecretBinary, 'base64').toString('ascii'));

    const { username, password } = secret;

    const connection = await mysql.createConnection({
      host: rdsEndpoint,
      user: username,
      password: password,
      database: databaseName,
    });

    const [rows] = await connection.execute('SHOW TABLES');

    console.log('Tables:');
    rows.forEach((row) => {
      console.log(row[`Tables_in_${databaseName}`]);
    });

    connection.end();

    return {
      statusCode: 200,
      body: 'Tables listed successfully',
    };
  } catch (err) {
    console.error('Error:', err.message);
    return {
      statusCode: 500,
      body: 'Error listing tables',
    };
  }
};
Replace the <RDS Endpoint> placeholder with the value you copied earlier in the lab.

Click Deploy.

Once the function is updated, click Test.

Note: Once complete, the Response should have a statusCode of 200.

Conclusion
Congratulations â€” you've completed this hands-on lab!
